#!/bin/bash
set -euo pipefail

# RSS Inbox Installation Script
# Installs the RSS Inbox CLI tool with uv preference and venv fallback

# Data scheme setup (Scheme A - project-local)
source ~/.env_common
slug=$(slugify "$(basename "$PWD")")
PROJECT_DIR="$PWD/data"
mkdir -p "$PROJECT_DIR"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
PACKAGE_NAME="rss_inbox"
BIN_NAME="rss-inbox"

echo "=== RSS Inbox Installation ==="
echo "Project Root: $PROJECT_ROOT"
echo "Package Name: $PACKAGE_NAME"
echo "Binary Name: $BIN_NAME"
echo "Data Directory: $PROJECT_DIR"
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to create wrapper script
create_wrapper() {
    local wrapper_path="$1"
    local python_path="$2"
    local project_root="$3"
    
    echo "Creating wrapper script at: $wrapper_path"
    
    cat > "$wrapper_path" << EOF
#!/bin/bash
# RSS Inbox CLI wrapper script
# Generated by install.sh

# Set up environment
export PYTHONPATH="$project_root/src:\$PYTHONPATH"
cd "$project_root"

# Execute the CLI
exec "$python_path" -m $PACKAGE_NAME.cli "\$@"
EOF
    
    chmod +x "$wrapper_path"
    echo "✓ Created executable wrapper: $wrapper_path"
}

# Function to install with uv
install_with_uv() {
    echo "Installing with uv..."
    
    # Check if uv is available
    if ! command_exists uv; then
        echo "✗ uv not found. Please install uv first or use venv fallback."
        return 1
    fi
    
    # Install in development mode
    cd "$PROJECT_ROOT"
    uv pip install -e .
    
    # Get the Python path from uv
    PYTHON_PATH=$(uv run python -c "import sys; print(sys.executable)")
    
    echo "✓ Installed with uv"
    echo "Python path: $PYTHON_PATH"
    
    return 0
}

# Function to install with venv
install_with_venv() {
    echo "Installing with venv..."
    
    local venv_path="$PROJECT_ROOT/.venv"
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "$venv_path" ]; then
        echo "Creating virtual environment..."
        python3 -m venv "$venv_path"
    fi
    
    # Activate virtual environment
    source "$venv_path/bin/activate"
    
    # Upgrade pip
    pip install --upgrade pip
    
    # Install in development mode
    cd "$PROJECT_ROOT"
    pip install -e .
    
    # Get Python path
    PYTHON_PATH="$venv_path/bin/python"
    
    echo "✓ Installed with venv"
    echo "Python path: $PYTHON_PATH"
    
    return 0
}

# Function to find installation target directory
find_install_target() {
    # Try common locations for user binaries
    local candidates=(
        "$HOME/.local/bin"
        "$HOME/bin"
        "/usr/local/bin"
    )
    
    for dir in "${candidates[@]}"; do
        if [ -d "$dir" ] && [ -w "$dir" ]; then
            echo "$dir"
            return 0
        fi
    done
    
    # Create ~/.local/bin if it doesn't exist
    local local_bin="$HOME/.local/bin"
    mkdir -p "$local_bin"
    echo "$local_bin"
}

# Main installation logic
main() {
    echo "Starting installation..."
    
    # Try installation methods
    PYTHON_PATH=""
    
    if install_with_uv; then
        PYTHON_PATH=$(uv run python -c "import sys; print(sys.executable)" 2>/dev/null || echo "")
    elif install_with_venv; then
        PYTHON_PATH="$PROJECT_ROOT/.venv/bin/python"
    else
        echo "✗ Installation failed with both uv and venv methods"
        exit 1
    fi
    
    if [ -z "$PYTHON_PATH" ]; then
        echo "✗ Could not determine Python path"
        exit 1
    fi
    
    # Test the installation
    echo "Testing installation..."
    if ! "$PYTHON_PATH" -c "import $PACKAGE_NAME; print('Import successful')" >/dev/null 2>&1; then
        echo "✗ Package import test failed"
        exit 1
    fi
    
    # Find installation target
    INSTALL_DIR=$(find_install_target)
    WRAPPER_PATH="$INSTALL_DIR/$BIN_NAME"
    
    echo "Installation target: $INSTALL_DIR"
    
    # Create wrapper script
    create_wrapper "$WRAPPER_PATH" "$PYTHON_PATH" "$PROJECT_ROOT"
    
    # Test the wrapper
    echo "Testing wrapper script..."
    if ! "$WRAPPER_PATH" --help >/dev/null 2>&1; then
        echo "⚠ Wrapper script test failed, but installation may still work"
    else
        echo "✓ Wrapper script test passed"
    fi
    
    # Check if install directory is in PATH
    if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        echo ""
        echo "⚠ WARNING: $INSTALL_DIR is not in your PATH"
        echo "Add this line to your shell profile (.bashrc, .zshrc, etc.):"
        echo "export PATH=\"$INSTALL_DIR:\$PATH\""
        echo ""
    fi
    
    echo "=== Installation Complete ==="
    echo "Binary installed: $WRAPPER_PATH"
    echo "Test with: $BIN_NAME info"
    echo ""
    
    # Show quick test
    echo "Quick test:"
    "$WRAPPER_PATH" info || echo "Note: Test may fail if PATH is not updated yet"
}

# Run main function
main "$@"